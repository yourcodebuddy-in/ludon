---
import { Image } from "astro:assets";
import redHorse from "../../assets/horses/red.png";
import blueHorse from "../../assets/horses/blue.png";
import yellowHorse from "../../assets/horses/yellow.png";
import greenHorse from "../../assets/horses/green.png";
import computerImg from "../../assets/computer.png";
---

<section id="one-vs-two-options" class="space-y-5 hidden">
  <div>
    <h2 class="text-center text-xl">Enter player names</h2>
    <p class="text-center text-gray-600">Select player horse for every player.</p>
  </div>
  <div class="flex [&_input]:flex-1 gap-2 sm:gap-4 bg-gray-200 p-3 rounded-2xl">
    <div class="flex gap-2 sm:gap-4">
      <Image src={redHorse} alt="Red horse" id="one-vs-two-r1" class="r w-4 h-8 sm:h-9 sm:w-5 opacity-100" />
      <Image src={blueHorse} alt="Blue horse" id="one-vs-two-b1" class="b w-4 h-8 sm:h-9 sm:w-5 opacity-40" />
      <Image src={yellowHorse} alt="Yellow horse" id="one-vs-two-y1" class="y w-4 h-8 sm:h-9 sm:w-5 opacity-40" />
      <Image src={greenHorse} alt="Green horse" id="one-vs-two-g1" class="g w-4 h-8 sm:h-9 sm:w-5 opacity-40" />
    </div>
    <input
      type="text"
      id="one-vs-two-p1-name"
      value="Player 1"
      placeholder="Player 1 Name"
      class="sm:h-9 rounded-xl text-center w-full bg-white"
    /><Image
      src={computerImg}
      alt="Computer"
      id="computer-p1"
      aria-selected="false"
      class="bg-white p-1.5 w-10 h-10 rounded-xl aria-selected:bg-ludon-yellow cursor-pointer"
    />
  </div>
  <div class="flex [&_input]:flex-1 gap-2 sm:gap-4 bg-gray-200 p-3 rounded-2xl">
    <div class="flex gap-2 sm:gap-4">
      <Image src={redHorse} alt="Red horse" id="one-vs-two-r2" class="r w-4 h-8 sm:h-9 sm:w-5 opacity-40" />
      <Image src={blueHorse} alt="Blue horse" id="one-vs-two-b2" class="b w-4 h-8 sm:h-9 sm:w-5 opacity-100" />
      <Image src={yellowHorse} alt="Yellow horse" id="one-vs-two-y2" class="y w-4 h-8 sm:h-9 sm:w-5 opacity-40" />
      <Image src={greenHorse} alt="Green horse" id="one-vs-two-g2" class="g w-4 h-8 sm:h-9 sm:w-5 opacity-40" />
    </div>
    <input
      type="text"
      id="one-vs-two-p2-name"
      value="Player 2"
      placeholder="Player 2 Name"
      class="sm:h-9 rounded-xl text-center w-full bg-white"
    /><Image
      src={computerImg}
      alt="Computer"
      id="computer-p2"
      aria-selected="false"
      class="bg-white p-1.5 w-10 h-10 rounded-xl aria-selected:bg-ludon-yellow cursor-pointer"
    />
  </div>
  <div class="flex [&_input]:flex-1 gap-2 sm:gap-4 bg-gray-200 p-3 rounded-2xl">
    <div class="flex gap-2 sm:gap-4">
      <Image src={redHorse} alt="Red horse" id="one-vs-two-r3" class="r w-4 h-8 sm:h-9 sm:w-5 opacity-40" />
      <Image src={blueHorse} alt="Blue horse" id="one-vs-two-b3" class="b w-4 h-8 sm:h-9 sm:w-5 opacity-40" />
      <Image src={yellowHorse} alt="Yellow horse" id="one-vs-two-y3" class="y w-4 h-8 sm:h-9 sm:w-5 opacity-100" />
      <Image src={greenHorse} alt="Green horse" id="one-vs-two-g3" class="g w-4 h-8 sm:h-9 sm:w-5 opacity-40" />
    </div>
    <input
      type="text"
      id="one-vs-two-p3-name"
      value="Player 3"
      placeholder="Player 3 Name"
      class="sm:h-9 rounded-xl text-center w-full bg-white"
    /><Image
      src={computerImg}
      alt="Computer"
      id="computer-p3"
      aria-selected="false"
      class="bg-white p-1.5 w-10 h-10 rounded-xl aria-selected:bg-ludon-yellow cursor-pointer"
    />
  </div>
  <button id="start-game-one-vs-two" class="bg-ludon-green text-white rounded-xl p-2.5 text-lg w-full">Start</button>
</section>

<script>
  // Get elements
  const horseImages = document.querySelectorAll("#one-vs-two-options img");
  const player1Input = document.getElementById("one-vs-two-p1-name") as HTMLInputElement | null;
  const player2Input = document.getElementById("one-vs-two-p2-name") as HTMLInputElement | null;
  const player3Input = document.getElementById("one-vs-two-p3-name") as HTMLInputElement | null;
  const startButton = document.getElementById("start-game-one-vs-two") as HTMLButtonElement | null;

  // Computer buttons
  const computerP1 = document.getElementById("computer-p1");
  const computerP2 = document.getElementById("computer-p2");
  const computerP3 = document.getElementById("computer-p3");
  const computerButtons = [computerP1, computerP2, computerP3];

  // Track selected horses for each player
  const selectedHorses = {
    1: "r", // Default selections
    2: "b",
    3: "y",
  };

  // Map horse type to index
  const horseTypeToIndex = { r: 1, b: 2, y: 3, g: 4 };

  // Initialize session storage with default values
  sessionStorage.setItem("one-vs-two-player-1", "1");
  sessionStorage.setItem("game-participants-1", ".r57");
  sessionStorage.setItem("one-vs-two-player-2", "2");
  sessionStorage.setItem("game-participants-2", ".b57");
  sessionStorage.setItem("one-vs-two-player-3", "3");
  sessionStorage.setItem("game-participants-3", ".y57");
  sessionStorage.setItem("one-vs-two-not-selected-player", "4");

  sessionStorage.setItem("one-vs-two-player-1-name", "Player 1");
  sessionStorage.setItem("one-vs-two-player-2-name", "Player 2");
  sessionStorage.setItem("one-vs-two-player-3-name", "Player 3");

  // Set default computer player (player 3 - yellow)
  sessionStorage.setItem("one-vs-two-computer-player-1", "3");
  sessionStorage.setItem("one-vs-two-computer-player-2", "");

  // Load previously saved computer selections from session storage
  for (let i = 1; i <= 3; i++) {
    const isComputerPlayer = sessionStorage.getItem(`one-vs-two-computer-player-${i}`);
    if (isComputerPlayer) {
      const button = computerButtons[i - 1];
      if (button) {
        button.setAttribute("aria-selected", "true");
      }
    }
  }

  // Handle horse selection
  horseImages.forEach((img) => {
    if (img.id.startsWith("one-vs-two-")) {
      img.addEventListener("click", (event) => {
        const target = event.target as HTMLImageElement;
        const targetId = target.id;
        const targetClass = target.className.split(" ")[0]; // Get the first class (r, b, y, or g)
        const playerNum = targetId.charAt(targetId.length - 1);

        // If this horse is already selected by another player, don't allow selection
        for (const [player, horse] of Object.entries(selectedHorses)) {
          if (player !== playerNum && horse === targetClass) {
            return; // Horse already selected by another player
          }
        }

        // Update the selected horse for this player
        const previousHorse = selectedHorses[playerNum as unknown as keyof typeof selectedHorses];
        selectedHorses[playerNum as unknown as keyof typeof selectedHorses] = targetClass;

        // Reset opacity for all horses in this player's row
        const siblings = Array.from(target.parentElement?.children || []) as HTMLImageElement[];
        siblings.forEach((sib) => {
          sib.style.opacity = "0.4";
        });

        // Set clicked horse to full opacity
        target.style.opacity = "1";

        const horseIndex = horseTypeToIndex[targetClass as keyof typeof horseTypeToIndex];

        // Save selected horse to session storage
        sessionStorage.setItem(`one-vs-two-player-${playerNum}`, horseIndex.toString());
        sessionStorage.setItem(`game-participants-${playerNum}`, `.${targetClass}57`);

        // Update which horse is not selected
        const usedHorses = Object.values(selectedHorses);
        for (const horseType of ["r", "b", "y", "g"]) {
          if (!usedHorses.includes(horseType)) {
            const notSelectedIndex = horseTypeToIndex[horseType as keyof typeof horseTypeToIndex];
            sessionStorage.setItem("one-vs-two-not-selected-player", notSelectedIndex.toString());
            break;
          }
        }

        // Update computer player values based on horse color
        const computerPlayers = [];
        for (let i = 1; i <= 2; i++) {
          const computerPlayerValue = sessionStorage.getItem(`one-vs-two-computer-player-${i}`);
          if (computerPlayerValue) {
            const playerIndex = parseInt(computerPlayerValue);
            const playerHorseType = selectedHorses[playerIndex as keyof typeof selectedHorses];
            const colorIndex = horseTypeToIndex[playerHorseType as keyof typeof horseTypeToIndex];
            computerPlayers.push({ position: i, player: playerIndex, colorIndex });
          }
        }

        // Update computer player values in session storage
        computerPlayers.forEach(({ position, colorIndex }) => {
          const playerId = sessionStorage.getItem(`one-vs-two-player-${position}`);
          sessionStorage.setItem(`one-vs-two-computer-player-${position}`, playerId || "");
        });
      });
    }
  });

  // Handle computer selection
  computerButtons.forEach((button, index) => {
    button?.addEventListener("click", () => {
      const playerNumber = index + 1;
      const isSelected = button.getAttribute("aria-selected") === "true";

      // Toggle selection for this button
      button.setAttribute("aria-selected", isSelected ? "false" : "true");

      // Count how many computer players are currently selected
      let computerPlayerCount = 0;
      const computerPlayers = [];

      for (let i = 1; i <= 3; i++) {
        const computerValue = sessionStorage.getItem(`one-vs-two-computer-player-${i}`);
        if (computerValue) {
          computerPlayerCount++;
          if (i <= 2) {
            // Only track the first two computer slots
            computerPlayers.push(parseInt(computerValue));
          }
        }
      }

      if (isSelected) {
        // Remove this player from computer players if not the last one
        if (computerPlayerCount > 1) {
          // Find which computer player slot this is in
          let slotToRemove = null;
          for (let i = 1; i <= 2; i++) {
            if (sessionStorage.getItem(`one-vs-two-computer-player-${i}`) === playerNumber.toString()) {
              slotToRemove = i;
              break;
            }
          }

          if (slotToRemove) {
            sessionStorage.setItem(`one-vs-two-computer-player-${slotToRemove}`, "");
          }
        } else {
          // Don't allow removing the last computer player
          button.setAttribute("aria-selected", "true");
          alert("At least one player must be computer controlled.");
          return;
        }
      } else {
        // Add this player to computer players
        if (computerPlayerCount < 2) {
          // Find an empty slot
          let emptySlot = null;
          for (let i = 1; i <= 2; i++) {
            if (!sessionStorage.getItem(`one-vs-two-computer-player-${i}`)) {
              emptySlot = i;
              break;
            }
          }

          if (emptySlot) {
            const horseType = selectedHorses[playerNumber as keyof typeof selectedHorses];
            const colorIndex = horseTypeToIndex[horseType as keyof typeof horseTypeToIndex];
            sessionStorage.setItem(`one-vs-two-computer-player-${emptySlot}`, colorIndex.toString());
          }
        } else {
          // If already 2 computer players, don't allow a third
          button.setAttribute("aria-selected", "false");
          alert("Only two players can be computer controlled.");
          return;
        }
      }
    });
  });

  // Save player names
  function savePlayerNames() {
    if (player1Input) {
      sessionStorage.setItem("one-vs-two-player-1-name", player1Input.value || "Player 1");
    }
    if (player2Input) {
      sessionStorage.setItem("one-vs-two-player-2-name", player2Input.value || "Player 2");
    }
    if (player3Input) {
      sessionStorage.setItem("one-vs-two-player-3-name", player3Input.value || "Player 3");
    }
  }

  // Save names on input change
  player1Input?.addEventListener("input", savePlayerNames);
  player2Input?.addEventListener("input", savePlayerNames);
  player3Input?.addEventListener("input", savePlayerNames);

  // Validate and save names when start button is clicked
  startButton?.addEventListener("click", () => {
    // Check if all players have unique horses
    const uniqueHorses = new Set(Object.values(selectedHorses));
    if (uniqueHorses.size !== 3) {
      alert("Each player must select a unique horse color before starting the game.");
      return;
    }

    // Ensure at least one computer player is selected
    let hasComputerPlayer = false;
    for (let i = 1; i <= 2; i++) {
      if (sessionStorage.getItem(`one-vs-two-computer-player-${i}`)) {
        hasComputerPlayer = true;
        break;
      }
    }

    if (!hasComputerPlayer) {
      // Set player 3 as computer by default
      const player3HorseType = selectedHorses[3];
      const colorIndex = horseTypeToIndex[player3HorseType as keyof typeof horseTypeToIndex];
      sessionStorage.setItem("one-vs-two-computer-player-1", colorIndex.toString());
    }

    // Save player names and proceed
    savePlayerNames();
    window.location.href = "/game-board";
  });
</script>
